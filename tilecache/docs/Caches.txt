TileCache Caches
================

TileCache offers access to a number of different caches. These caches are used
to store tiles. 

For every cache configuration a 'structure' option can be set: this option set
how the tiles are stored. Each cache type has a default structure.
Possible values are:
  * disk: default 'Disk'
  * tms
  * flipped-tms
  * google: default for 'GoogleDisk'
  * s3: default for 'AWSS3'
  * memcached: default for 'Memcached'

Disk
----
Example Configuration::

  [cache]
  type=Disk
  base=/var/lib/tilecache
  umask=002

Dependencies: None

GoogleDisk
----
This cache is deprecated: use a Disk cache and set the structure to google.

Example Configuration::

  [cache]
  type=GoogleDisk
  base=/var/lib/tilecache

Dependencies: None
Note: A simple subclass of the Disk cache, this switches the Y tile ordering
on the disk, so Google Maps users can easily access tiles directly (e.g. 
bypassing tilecache.py, if all tiles have been pre-rendered) with a simple 
CustomTileUrl function.

Memcached
---------
Example configuration::

  [cache]
  type=Memcached
  servers=127.0.0.1:11211

Dependencies:
 * memcache Python module must be installed on your system path.
   http://code.sixapart.com/svn/memcached/trunk/api/python/memcache.py

Amazon S3
---------
Example configuration::

  [cache]
  type=AWSS3
  access_key=833833ABC88838
  secret_access_key=8234abyi3kdjby8so8idu
  bucket_name=mybucketname
  policy=public-read
  location=EU

Use bucket_name if you need to name your bucket. If the property is left over,
TileCache will generate a name based on your access key.
This name cannot contain upper-case characters.

The bucket and content access can be set using the policy option. Possible
values are 'private', 'public-read', 'public-read-write' or
'authenticated-read'. Default is 'private'

location set the bucket location. Possible value is 'EU'. The default is to
store the bucket in the US.

Dependencies:
  This cache uses the boto libraries available from
  http://code.google.com/p/boto/, boto is a package that wraps the Amazon APIs in
  a Pythonic wrapper. This is installable on recent Debian-based distributions as
  python-boto. It can be installed via easy_install from setuptools as well:
  simply easy_install boto.

